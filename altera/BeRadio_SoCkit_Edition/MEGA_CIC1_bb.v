// Generated by CIC 13.0 [Altera, IP Toolbench 1.3.0 Build 232]
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
// ************************************************************
// Copyright (C) 1991-2013 Altera Corporation
// Any megafunction design, and related net list (encrypted or decrypted),
// support information, device programming or simulation file, and any other
// associated documentation or information provided by Altera or a partner
// under Altera's Megafunction Partnership Program may be used only to
// program PLD devices (but not masked PLD devices) from Altera.  Any other
// use of such megafunction design, net list, support information, device
// programming or simulation file, or any other related documentation or
// information is prohibited for any other purpose, including, but not
// limited to modification, reverse engineering, de-compiling, or use with
// any other silicon devices, unless such use is explicitly licensed under
// a separate agreement with Altera or a megafunction partner.  Title to
// the intellectual property, including patents, copyrights, trademarks,
// trade secrets, or maskworks, embodied in any such megafunction design,
// net list, support information, device programming or simulation file, or
// any other related documentation or information provided by Altera or a
// megafunction partner, remains with Altera, the megafunction partner, or
// their respective licensors.  No other licenses, including any licenses
// needed under any third party's intellectual property, are provided herein.

module MEGA_CIC1 (
	clk,
	clken,
	reset_n,
	in_data,
	in_startofpacket,
	in_endofpacket,
	in_valid,
	out_ready,
	in_error,
	out_data,
	out_channel,
	out_startofpacket,
	out_endofpacket,
	in_ready,
	out_valid,
	out_error);

	input		clk;
	input		clken;
	input		reset_n;
	input	[15:0]	in_data;
	input		in_startofpacket;
	input		in_endofpacket;
	input		in_valid;
	input		out_ready;
	input	[1:0]	in_error;
	output	[15:0]	out_data;
	output		out_channel;
	output		out_startofpacket;
	output		out_endofpacket;
	output		in_ready;
	output		out_valid;
	output	[1:0]	out_error;
endmodule
